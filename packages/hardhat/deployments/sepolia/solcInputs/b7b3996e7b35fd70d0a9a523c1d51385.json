{
  "language": "Solidity",
  "sources": {
    "contracts/twitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract twitter{\n\n    uint16 public MAX_TWEET_LENGTH = 280;\n\n    struct Tweet {\n        uint256 id;\n        address author;\n        string content;\n        uint256 timestamp;\n        uint256 likes;\n    }\n\n    mapping(address => Tweet []) public tweets;\n    address public owner;\n\n    event TweetCreated(uint256 id,address author, string content, uint256 timestamp);\n    event TweetLiked(address liker, address tweetAuthor, uint256 tweetId, uint256 newLikeCount);\n    event TweetUnliked(address unliker, address tweetAuthor, uint256 tweetId, uint256 newLikeCount);\n\n    constructor(){\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"YOU ARE NOT THE OWNER\");\n        _; \n    }\n\n    function changeTweetLength(uint16 newTweetLength) public onlyOwner{\n        MAX_TWEET_LENGTH = newTweetLength;\n    }\n\n    function createTweet(string memory _tweet) public {\n        require(bytes(_tweet).length <= MAX_TWEET_LENGTH , \"Tweet is too long!\");\n\n        Tweet memory newTweet = Tweet({\n            id: tweets[msg.sender].length,\n            author:msg.sender,\n            content:_tweet,\n            timestamp: block.timestamp,\n            likes: 0\n        });\n        tweets[msg.sender].push(newTweet);\n        emit TweetCreated(newTweet.id, newTweet.author, newTweet.content, newTweet.timestamp);\n    }\n\n    function likeTweet(address author, uint256 id) external{\n        require(tweets[author][id].id == id, \"TWEET DOES NOT EXIST\");\n        tweets[author][id].likes++;\n        emit TweetLiked(msg.sender, author, id, tweets[author][id].likes);\n\n    }\n\n    function unlikeTweet(address author, uint256 id) external{\n        require(tweets[author][id].id == id, \"TWEET DOES NOT EXIST\");\n        require(tweets[author][id].likes > 0, \"LIKES ARE 0\");\n        tweets[author][id].likes--;\n        emit TweetUnliked(msg.sender, author, id, tweets[author][id].likes);\n    }\n\n    function getTweet(address _owner, uint _i) public view returns (Tweet memory){\n        return tweets[_owner][_i];\n    }\n    function getAllTweets(address _owner) public view returns (Tweet[] memory){\n        return tweets[_owner];\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}